// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package pgqueue

import (
	pq "github.com/lib/pq"
)

// PQListenerMocker builds mocks for type PQListener.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
type PQListenerMocker struct {
	Close               func() (r0 error)
	Listen              func(channel string) (r0 error)
	NotificationChannel func() (r0 <-chan *pq.Notification)
	Ping                func() (r0 error)
	Unlisten            func(channel string) (r0 error)
	UnlistenAll         func() (r0 error)
}

// Mock returns a mock for PQListener that calls the functions
// defined as struct fields in the receiver.
func (m *PQListenerMocker) Mock() PQListenerMock {
	return _makegomock_PQListenerMockFromMocker{m}
}

type _makegomock_PQListenerMockFromMocker struct {
	m *PQListenerMocker
}

func (m _makegomock_PQListenerMockFromMocker) Close() (r0 error) {
	return m.m.Close()
}

func (m _makegomock_PQListenerMockFromMocker) Listen(channel string) (r0 error) {
	return m.m.Listen(channel)
}

func (m _makegomock_PQListenerMockFromMocker) NotificationChannel() (r0 <-chan *pq.Notification) {
	return m.m.NotificationChannel()
}

func (m _makegomock_PQListenerMockFromMocker) Ping() (r0 error) {
	return m.m.Ping()
}

func (m _makegomock_PQListenerMockFromMocker) Unlisten(channel string) (r0 error) {
	return m.m.Unlisten(channel)
}

func (m _makegomock_PQListenerMockFromMocker) UnlistenAll() (r0 error) {
	return m.m.UnlistenAll()
}

// PQListenerMock is a mock with the same underlying type as PQListener.
//
// It is copied from the original just to avoid introducing a dependency on
// PQListener's package.
type PQListenerMock interface {
	Close() (r0 error)
	Listen(channel string) (r0 error)
	NotificationChannel() (r0 <-chan *pq.Notification)
	Ping() (r0 error)
	Unlisten(channel string) (r0 error)
	UnlistenAll() (r0 error)
}
