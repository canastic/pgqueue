// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package pgqueue

import (
	context "context"
	fmt "fmt"
	runtime "runtime"

	cmp "github.com/google/go-cmp/cmp"
)

// DeliveryMocker builds mocks for type Delivery.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
//
// The Describe method is a shortcut to define this struct's fields in a
// declarative manner.
type DeliveryMocker struct {
	Ack           func(a0 context.Context, a1 Ack)
	UnwrapMessage func(into interface{}) (r0 error)
}

// Describe lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call Mock to get a mock that implements
// the behavior you described.
func (m *DeliveryMocker) Describe() DeliveryMockDescriptor {
	return DeliveryMockDescriptor{m: m}
}

// A DeliveryMockDescriptor lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call its Mock method to get a mock that
// implements the behavior you described.
type DeliveryMockDescriptor struct {
	m                         *DeliveryMocker
	descriptors_Ack           []*DeliveryAckMockDescriptor
	descriptors_UnwrapMessage []*DeliveryUnwrapMessageMockDescriptor
}

// Mock returns a mock that the Delivery interface, following the behavior
// described by the descriptor methods.
//
// It also returns a function that should be called before the test is done to
// ensure that the expected number of calls to the mock methods happened. You
// can pass a *testing.T to it, since it implements the interface it wants.
func (d DeliveryMockDescriptor) Mock() (m DeliveryMock, assert func(t interface {
	Errorf(s string, args ...interface{})
}) (ok bool)) {
	assert = d.done()
	return d.m.Mock(), assert
}

func (d DeliveryMockDescriptor) done() func(t interface {
	Errorf(s string, args ...interface{})
}) bool {
	var atAssert []func() (method string, errs []string)
	type specErrs struct {
		fileLine string
		errs     []string
	}

	if len(d.descriptors_Ack) > 0 {
		for _, desc := range d.descriptors_Ack {
			desc := desc
			calls := 0
			desc.call = func(a0 context.Context, a1 Ack) {
				calls++
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Ack", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Ack = func(a0 context.Context, a1 Ack) {
			var matching []*DeliveryAckMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Ack {
				errs := desc.argValidator(a0, a1)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				matching[0].call(a0, a1)
				return
			}
			var args string
			for i, arg := range []interface{}{a0, a1} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at " + errs.fileLine + ":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for Delivery.Ack with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for Delivery.Ack with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Ack = func(a0 context.Context, a1 Ack) {
			panic("unexpected call to mock for Delivery.Ack")
		}
	}
	if len(d.descriptors_UnwrapMessage) > 0 {
		for _, desc := range d.descriptors_UnwrapMessage {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(into interface{}) (r0 error) {
				calls++
				return prev(into)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "UnwrapMessage", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.UnwrapMessage = func(into interface{}) (r0 error) {
			var matching []*DeliveryUnwrapMessageMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_UnwrapMessage {
				errs := desc.argValidator(into)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(into)
			}
			var args string
			for i, arg := range []interface{}{into} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at " + errs.fileLine + ":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for Delivery.UnwrapMessage with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for Delivery.UnwrapMessage with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.UnwrapMessage = func(into interface{}) (r0 error) {
			panic("unexpected call to mock for Delivery.UnwrapMessage")
		}
	}
	return func(t interface {
		Errorf(s string, args ...interface{})
	}) bool {
		ok := true
		for _, assert := range atAssert {
			method, errs := assert()
			for _, err := range errs {
				ok = false
				t.Errorf("mock for Delivery.%s: %s", method, err)
			}
		}
		return ok
	}
}

// Ack starts describing a way method Delivery.Ack is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DeliveryMockDescriptor) Ack() *DeliveryAckMockDescriptor {
	return d.newDeliveryAckMockDescriptor()
}

func (d DeliveryMockDescriptor) newDeliveryAckMockDescriptor() *DeliveryAckMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DeliveryAckMockDescriptor{
		mockDesc:     d,
		times:        func(int) error { return nil },
		argValidator: func(got_a0 context.Context, got_a1 Ack) []string { return nil },
		fileLine:     fmt.Sprintf("%s:%d", file, line),
	}
}

// DeliveryAckMockDescriptor is returned by DeliveryMockDescriptor.Ack and
// holds methods to describe the mock for method Delivery.Ack.
type DeliveryAckMockDescriptor struct {
	mockDesc     DeliveryMockDescriptor
	times        func(int) error
	argValidator func(got_a0 context.Context, got_a1 Ack) []string
	call         func(a0 context.Context, a1 Ack)
	fileLine     string
}

// Takes lets you specify a value with which the actual value passed to
// the mocked method Delivery.Ack as parameter #1
// will be compared.
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *DeliveryAckMockDescriptor) Takes(a0 context.Context, opts ...cmp.Option) DeliveryAckMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 context.Context, got_a1 Ack) []string {
		errMsgs := prev(got_a0, got_a1)
		if diff := cmp.Diff(a0, got_a0, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n"+diff)
		}
		return errMsgs
	}
	return DeliveryAckMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// Ack as parameter #1 is expected.
func (d *DeliveryAckMockDescriptor) TakesAny() DeliveryAckMockDescriptorWith1Arg {
	return DeliveryAckMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method Delivery.Ack as parameter #1.
func (d *DeliveryAckMockDescriptor) TakesMatching(match func(a0 context.Context) error) DeliveryAckMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 context.Context, got_a1 Ack) []string {
		errMsgs := prev(got_a0, got_a1)
		if err := match(got_a0); err != nil {
			errMsgs = append(errMsgs, "parameter \"a0\" custom matcher error: "+err.Error())
		}
		return errMsgs
	}
	return DeliveryAckMockDescriptorWith1Arg{d}
}

// DeliveryAckMockDescriptorWith1Arg is a step forward in the description of a way that the
// method Delivery.Ack is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DeliveryAckMockDescriptorWith1Arg struct {
	methodDesc *DeliveryAckMockDescriptor
}

// And lets you specify a value with which the actual value passed to
// the mocked method Delivery.Ack as parameter #2
// will be compared.
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d DeliveryAckMockDescriptorWith1Arg) And(a1 Ack, opts ...cmp.Option) DeliveryAckMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 context.Context, got_a1 Ack) []string {
		errMsgs := prev(got_a0, got_a1)
		if diff := cmp.Diff(a1, got_a1, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n"+diff)
		}
		return errMsgs
	}
	return DeliveryAckMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Ack as parameter #2 is expected.
func (d DeliveryAckMockDescriptorWith1Arg) AndAny() DeliveryAckMockDescriptorWith2Args {
	return DeliveryAckMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method Delivery.Ack as parameter #2.
func (d DeliveryAckMockDescriptorWith1Arg) AndMatching(match func(a1 Ack) error) DeliveryAckMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 context.Context, got_a1 Ack) []string {
		errMsgs := prev(got_a0, got_a1)
		if err := match(got_a1); err != nil {
			errMsgs = append(errMsgs, "parameter \"a1\" custom matcher error: "+err.Error())
		}
		return errMsgs
	}
	return DeliveryAckMockDescriptorWith2Args{d.methodDesc}
}

// DeliveryAckMockDescriptorWith2Args is a step forward in the description of a way that the
// method Delivery.Ack is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DeliveryAckMockDescriptorWith2Args struct {
	methodDesc *DeliveryAckMockDescriptor
}

// Times lets you specify a exact number of times this method is expected to be
// called.
func (d DeliveryAckMockDescriptorWith2Args) Times(times int) DeliveryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d DeliveryAckMockDescriptorWith2Args) AtLeastTimes(times int) DeliveryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d DeliveryAckMockDescriptorWith2Args) TimesMatching(f func(times int) error) DeliveryMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DeliveryMockDescriptor.Mock for details.
func (d DeliveryAckMockDescriptorWith2Args) Mock() (m DeliveryMock, assert func(t interface{ Errorf(string, ...interface{}) }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}

// Ack finishes the current description for method Delivery.Ack and
// starts describing for method Ack.
//
// See DeliveryMockDescriptor.Ack for details.
func (d DeliveryAckMockDescriptorWith2Args) Ack() *DeliveryAckMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDeliveryAckMockDescriptor()
}

// UnwrapMessage finishes the current description for method Delivery.Ack and
// starts describing for method UnwrapMessage.
//
// See DeliveryMockDescriptor.UnwrapMessage for details.
func (d DeliveryAckMockDescriptorWith2Args) UnwrapMessage() *DeliveryUnwrapMessageMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDeliveryUnwrapMessageMockDescriptor()
}

func (d *DeliveryAckMockDescriptor) done() {
	d.mockDesc.descriptors_Ack = append(d.mockDesc.descriptors_Ack, d)
}

// UnwrapMessage starts describing a way method Delivery.UnwrapMessage is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DeliveryMockDescriptor) UnwrapMessage() *DeliveryUnwrapMessageMockDescriptor {
	return d.newDeliveryUnwrapMessageMockDescriptor()
}

func (d DeliveryMockDescriptor) newDeliveryUnwrapMessageMockDescriptor() *DeliveryUnwrapMessageMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DeliveryUnwrapMessageMockDescriptor{
		mockDesc:     d,
		times:        func(int) error { return nil },
		argValidator: func(got_into interface{}) []string { return nil },
		fileLine:     fmt.Sprintf("%s:%d", file, line),
	}
}

// DeliveryUnwrapMessageMockDescriptor is returned by DeliveryMockDescriptor.UnwrapMessage and
// holds methods to describe the mock for method Delivery.UnwrapMessage.
type DeliveryUnwrapMessageMockDescriptor struct {
	mockDesc     DeliveryMockDescriptor
	times        func(int) error
	argValidator func(got_into interface{}) []string
	call         func(into interface{}) (r0 error)
	fileLine     string
}

// Takes lets you specify a value with which the actual value passed to
// the mocked method Delivery.UnwrapMessage as parameter #1
// will be compared.
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *DeliveryUnwrapMessageMockDescriptor) Takes(into interface{}, opts ...cmp.Option) DeliveryUnwrapMessageMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_into interface{}) []string {
		errMsgs := prev(got_into)
		if diff := cmp.Diff(into, got_into, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n"+diff)
		}
		return errMsgs
	}
	return DeliveryUnwrapMessageMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// UnwrapMessage as parameter #1 is expected.
func (d *DeliveryUnwrapMessageMockDescriptor) TakesAny() DeliveryUnwrapMessageMockDescriptorWith1Arg {
	return DeliveryUnwrapMessageMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method Delivery.UnwrapMessage as parameter #1.
func (d *DeliveryUnwrapMessageMockDescriptor) TakesMatching(match func(into interface{}) error) DeliveryUnwrapMessageMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_into interface{}) []string {
		errMsgs := prev(got_into)
		if err := match(got_into); err != nil {
			errMsgs = append(errMsgs, "parameter \"into\" custom matcher error: "+err.Error())
		}
		return errMsgs
	}
	return DeliveryUnwrapMessageMockDescriptorWith1Arg{d}
}

// DeliveryUnwrapMessageMockDescriptorWith1Arg is a step forward in the description of a way that the
// method Delivery.UnwrapMessage is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DeliveryUnwrapMessageMockDescriptorWith1Arg struct {
	methodDesc *DeliveryUnwrapMessageMockDescriptor
}

// Returns lets you specify the values that the mocked method Delivery.UnwrapMessage,
// if called with values matching the expectations, will return.
func (d DeliveryUnwrapMessageMockDescriptorWith1Arg) Returns(r0 error) DeliveryUnwrapMessageMockDescriptorWithReturn {
	return d.ReturnsFrom(func(interface{}) error {
		return r0
	})
}

// Returns lets you specify the values that the mocked method Delivery.UnwrapMessage,
// if called with values matching the expectations, will return.
//
// It passes such passed values to a function that then returns the return values.
func (d DeliveryUnwrapMessageMockDescriptorWith1Arg) ReturnsFrom(f func(into interface{}) (r0 error)) DeliveryUnwrapMessageMockDescriptorWithReturn {
	d.methodDesc.call = f
	return DeliveryUnwrapMessageMockDescriptorWithReturn{d.methodDesc}
}

// DeliveryUnwrapMessageMockDescriptorWithReturn is a step forward in the description of a way that
// method Delivery.UnwrapMessage is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
//
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type DeliveryUnwrapMessageMockDescriptorWithReturn struct {
	methodDesc *DeliveryUnwrapMessageMockDescriptor
}

// Times lets you specify a exact number of times this method is expected to be
// called.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) Times(times int) DeliveryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) AtLeastTimes(times int) DeliveryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) TimesMatching(f func(times int) error) DeliveryMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DeliveryMockDescriptor.Mock for details.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) Mock() (m DeliveryMock, assert func(t interface{ Errorf(string, ...interface{}) }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}

// Ack finishes the current description for method Delivery.UnwrapMessage and
// starts describing for method Ack.
//
// See DeliveryMockDescriptor.Ack for details.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) Ack() *DeliveryAckMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDeliveryAckMockDescriptor()
}

// UnwrapMessage finishes the current description for method Delivery.UnwrapMessage and
// starts describing for method UnwrapMessage.
//
// See DeliveryMockDescriptor.UnwrapMessage for details.
func (d DeliveryUnwrapMessageMockDescriptorWithReturn) UnwrapMessage() *DeliveryUnwrapMessageMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDeliveryUnwrapMessageMockDescriptor()
}

func (d *DeliveryUnwrapMessageMockDescriptor) done() {
	d.mockDesc.descriptors_UnwrapMessage = append(d.mockDesc.descriptors_UnwrapMessage, d)
}

// Mock returns a mock for Delivery that calls the functions
// defined as struct fields in the receiver.
//
// You probably want to use Describe instead.
func (m *DeliveryMocker) Mock() DeliveryMock {
	return _makegomock_DeliveryMockFromMocker{m}
}

type _makegomock_DeliveryMockFromMocker struct {
	m *DeliveryMocker
}

func (m _makegomock_DeliveryMockFromMocker) Ack(a0 context.Context, a1 Ack) {
	m.m.Ack(a0, a1)
}

func (m _makegomock_DeliveryMockFromMocker) UnwrapMessage(into interface{}) (r0 error) {
	return m.m.UnwrapMessage(into)
}

// DeliveryMock is a mock with the same underlying type as Delivery.
//
// It is copied from the original just to avoid introducing a dependency on
// Delivery's package.
type DeliveryMock interface {
	Ack(a0 context.Context, a1 Ack)
	UnwrapMessage(into interface{}) (r0 error)
}
